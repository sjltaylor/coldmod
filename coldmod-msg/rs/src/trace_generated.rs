// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_EVENT: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_EVENT: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_EVENT: [Event; 1] = [
  Event::FnCall,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Event(pub i8);
#[allow(non_upper_case_globals)]
impl Event {
  pub const FnCall: Self = Self(0);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 0;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::FnCall,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::FnCall => Some("FnCall"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Event {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Event {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Event {
    type Output = Event;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Event {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Event {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Event {}
pub enum TraceOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Trace<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Trace<'a> {
  type Inner = Trace<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Trace<'a> {
  pub const VT_EVENT: flatbuffers::VOffsetT = 4;
  pub const VT_PATH: flatbuffers::VOffsetT = 6;
  pub const VT_LINE: flatbuffers::VOffsetT = 8;
  pub const VT_COL: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Trace { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args TraceArgs<'args>
  ) -> flatbuffers::WIPOffset<Trace<'bldr>> {
    let mut builder = TraceBuilder::new(_fbb);
    builder.add_col(args.col);
    builder.add_line(args.line);
    if let Some(x) = args.path { builder.add_path(x); }
    builder.add_event(args.event);
    builder.finish()
  }


  #[inline]
  pub fn event(&self) -> Event {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Event>(Trace::VT_EVENT, Some(Event::FnCall)).unwrap()}
  }
  #[inline]
  pub fn path(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Trace::VT_PATH, None)}
  }
  #[inline]
  pub fn line(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(Trace::VT_LINE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn col(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(Trace::VT_COL, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Trace<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<Event>("event", Self::VT_EVENT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("path", Self::VT_PATH, false)?
     .visit_field::<u32>("line", Self::VT_LINE, false)?
     .visit_field::<u32>("col", Self::VT_COL, false)?
     .finish();
    Ok(())
  }
}
pub struct TraceArgs<'a> {
    pub event: Event,
    pub path: Option<flatbuffers::WIPOffset<&'a str>>,
    pub line: u32,
    pub col: u32,
}
impl<'a> Default for TraceArgs<'a> {
  #[inline]
  fn default() -> Self {
    TraceArgs {
      event: Event::FnCall,
      path: None,
      line: 0,
      col: 0,
    }
  }
}

pub struct TraceBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> TraceBuilder<'a, 'b> {
  #[inline]
  pub fn add_event(&mut self, event: Event) {
    self.fbb_.push_slot::<Event>(Trace::VT_EVENT, event, Event::FnCall);
  }
  #[inline]
  pub fn add_path(&mut self, path: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Trace::VT_PATH, path);
  }
  #[inline]
  pub fn add_line(&mut self, line: u32) {
    self.fbb_.push_slot::<u32>(Trace::VT_LINE, line, 0);
  }
  #[inline]
  pub fn add_col(&mut self, col: u32) {
    self.fbb_.push_slot::<u32>(Trace::VT_COL, col, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> TraceBuilder<'a, 'b> {
    let start = _fbb.start_table();
    TraceBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Trace<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Trace<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Trace");
      ds.field("event", &self.event());
      ds.field("path", &self.path());
      ds.field("line", &self.line());
      ds.field("col", &self.col());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Trace`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_trace_unchecked`.
pub fn root_as_trace(buf: &[u8]) -> Result<Trace, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Trace>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Trace` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_trace_unchecked`.
pub fn size_prefixed_root_as_trace(buf: &[u8]) -> Result<Trace, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Trace>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Trace` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_trace_unchecked`.
pub fn root_as_trace_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Trace<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Trace<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Trace` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_trace_unchecked`.
pub fn size_prefixed_root_as_trace_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Trace<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Trace<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Trace and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Trace`.
pub unsafe fn root_as_trace_unchecked(buf: &[u8]) -> Trace {
  flatbuffers::root_unchecked::<Trace>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Trace and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Trace`.
pub unsafe fn size_prefixed_root_as_trace_unchecked(buf: &[u8]) -> Trace {
  flatbuffers::size_prefixed_root_unchecked::<Trace>(buf)
}
#[inline]
pub fn finish_trace_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Trace<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_trace_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Trace<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
