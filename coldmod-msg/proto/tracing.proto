syntax = "proto3";

import "google/protobuf/empty.proto";

package coldmod_msg.proto.tracing;

message Trace {
  string key = 1;
  string thread_id = 2;
  string process_id = 3;
}

message TraceSrc {
  string key = 1;
}

message TraceSrcs {
  repeated TraceSrc trace_srcs = 2;
}

message OpenCommand {
    string key = 1;
}

message RemoveCommand {
    string key = 1;
}

message IgnoreCommand {
    string key = 1;
}

message SendSrcInfo {}

message ModCommand {
    oneof command {
        SendSrcInfo send_src_info = 1;
        IgnoreCommand ignore = 2;
        RemoveCommand remove = 3;
        OpenCommand   open   = 4;
    }
}

message ConnectKey {
  string key = 1;
}

message SrcIgnore {
  string key = 1;
}

message SrcAvailable {
  repeated string keys = 1;
}

message SrcRefs {
  string key = 1;
  uint32 count = 2;
}

message SrcRemoveResult {
  string key = 1;
  bool success = 2;
}

message SrcMessage {
    oneof possible_src_message {
        ConnectKey      connect_key = 1;
        SrcIgnore       src_ignore = 2;
        SrcAvailable    src_available = 3;
        SrcRefs         src_refs = 4;
        SrcRemoveResult src_remove_result = 5;
    }
}

message FetchOptions {
    bool all = 1;
}

message HeatSrc {
    string key = 1;
    int64 trace_count = 2;
}

message HeatMap {
    repeated HeatSrc srcs = 1;
}

service Traces {
  rpc collect(stream Trace) returns (google.protobuf.Empty);
  rpc set(TraceSrcs) returns (google.protobuf.Empty);
  rpc mod(stream SrcMessage) returns (stream ModCommand);
  rpc fetch(FetchOptions) returns (HeatMap);
}
